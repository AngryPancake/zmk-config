/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

/ {
    combos {
        compatible = "zmk,combos";

        game_mod_on {
            bindings = <&to 6>;
            key-positions = <6 5 39>;
            layers = <0>;
        };

        game_mod_off {
            bindings = <&to 0>;
            key-positions = <6 5 40>;
        };

        Esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        ins {
            bindings = <&kp INS>;
            key-positions = <7 20>;
        };

        slash {
            bindings = <&kp RA(SLASH)>;
            key-positions = <6 19>;
        };

        grep {
            bindings = <&tp_grep>;
            key-positions = <19 5>;
        };

        trade {
            bindings = <&tp_trade>;
            key-positions = <6 5 17>;
        };

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <18 21>;
        };

        LMeta {
            bindings = <&kp LGUI>;
            key-positions = <0 14>;
        };

        Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <11 12>;
        };

        enter {
            bindings = <&kp RET>;
            key-positions = <24 25>;
        };

        pipe {
            bindings = <&kp RA(PIPE)>;
            key-positions = <36 37>;
        };

        softoff {
            bindings = <&soft_off>;
            key-positions = <28 29 30 31>;
        };

        Copy {
            bindings = <&kp LC(INS)>;
            key-positions = <28 29>;
        };

        Paste {
            bindings = <&kp LS(INS)>;
            key-positions = <29 30>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 3>;
        };

        minus {
            bindings = <&mt UNDERSCORE MINUS>;
            key-positions = <8 9>;
        };

        LPare {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <21 22>;
        };

        RPare {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <22 23>;
        };

        Plus {
            bindings = <&mt EQUAL PLUS>;
            key-positions = <9 10>;
        };

        Dot {
            bindings = <&kp RA(DOT)>;
            key-positions = <33 32>;
        };

        Question {
            bindings = <&kp RA(QUESTION)>;
            key-positions = <7 8>;
        };

        Comma {
            bindings = <&kp RA(COMMA)>;
            key-positions = <20 21>;
        };

        LBrac {
            bindings = <&mt LEFT_BRACE LEFT_BRACKET>;
            key-positions = <33 34>;
        };

        RBrac {
            bindings = <&mt RIGHT_BRACE RIGHT_BRACKET>;
            key-positions = <34 35>;
        };

        Quotes {
            bindings = <&kp RA(SQT)>;
            key-positions = <24 23>;
        };

        ret {
            bindings = <&kp RET>;
            key-positions = <21 22 23>;
        };

        bspace2 {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17 18>;
        };
    };

    behaviors {
        tilde_tab: tilde_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "TILDE_TAB";
            bindings = <&kp GRAVE>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT|MOD_RGUI|MOD_LGUI)>;
            keep-mods = <(MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        };

        bt_mt: bt_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "tap:select,hold:clear";
            bindings = <&clr_bt_param>, <&to_bt_param>;

            #binding-cells = <2>;
            tapping-term-ms = <5000>;
        };

        Lmeta: Lmeta {
            compatible = "zmk,behavior-mod-morph";
            label = "LMETA";
            bindings = <&mt LEFT_META LG(SPACE)>, <&kp LS(TAB)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LGUI)>;
        };
    };

    macros {
        tp_less: tp_less {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(L) &kp RA(E) &kp RA(S) &kp RA(S) &kp SPACE>;
            label = "TP_LESS";
        };

        tp_grep: tp_grep {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp G &kp R &kp E &kp P &kp SPACE>;
            label = "TP_GREP";
        };

        tp_trade: tp_trade {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(T) &kp RA(R) &kp RA(A) &kp RA(D) &kp RA(E)>;
            label = "TP_TRADE";
        };

        to_bt_param: to_bt_param {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&out OUT_BLE &macro_param_1to2>,
                <&macro_press>,
                <&bt BT_SEL MACRO_PLACEHOLDER>;

            label = "TO_BT_PARAM";
        };

        clr_bt_param: clr_bt_param {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&out OUT_BLE &macro_param_1to2>,
                <&macro_press>,
                <&bt BT_SEL MACRO_PLACEHOLDER>,
                <&macro_press>,
                <&bt BT_CLR>;

            label = "CLR_BT_PARAM";
        };

        mo_at: momentary_release_alt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 0>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_META>,
                <&macro_tap>,
                <&to 0>;

            label = "momentary_release_alt";
        };

        close_term: close_term {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp LC(C) &kp LC(D)>;
            label = "CLOSE_TERM";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  GUI |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   | GUI/] |
            //        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |CTRL/'|
            //        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT |
            //                           | RSE | SPC | LWR |   | LWR | BKSP | RSE |

            bindings = <
&Lmeta  &tilde_tab  &kp Q           &kp W  &lt 5 E            &kp R        &kp T        &kp Y            &kp U         &kp I               &kp O    &kp P     &kp LBKT             &mt LMETA RBKT
        &sk LSHIFT  &lt 4 A         &kp S  &kp D              &kp F        &kp G        &kp H            &kp J         &kp K               &kp L    &kp SEMI  &mt RSHIFT SQT
        &kp LCTRL   &mt LEFT_ALT Z  &kp X  &kp C              &kp V        &kp B        &kp N            &kp M         &kp COMMA           &kp DOT  &kp FSLH  &mt RCTRL BACKSLASH
                                           &mt LEFT_META TAB  &lt 2 SPACE  &lt 1 RET    &lt 1 BACKSPACE  &lt 2 DELETE  &mt LEFT_GUI SPACE
            >;

            label = "MAIN";
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            //       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
            //       |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp BACKSPACE  &kp BACKSPACE  &kp N1        &kp N2      &kp N3         &kp N4        &kp N5           &kp N6         &kp N7        &kp N8        &kp N9        &kp N0        &kp MINUS             &mt PLUS EQUAL
               &sk LSHFT      &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &mt LSHFT UNDERSCORE
               &kp LCTRL      &kp F1        &kp F2      &kp F3         &kp F4        &kp F5           &kp F6         &kp F7        &kp F8        &kp F9        &kp F10       &mt F12 F11
                                                        &trans         &trans        &kp BACKSPACE    &kp BACKSPACE  &trans        &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |     | NMLK |  /  |  7  |  8  |  9  |  -  |   | VOLU| HOME| PRSC| PGUP| SCLK| CLCK|     |
            //       | CTRL |  *  |  4  |  5  |  6  |  +  |   | MUT | LEFT|  UP | RGHT| INS | APP |
            //       |      |  0  |  1  |  2  |  3  |  .  |   | VOLD| END | DOWN| PGDN| PAUS|     |
            //                          |     |     | ADJ |   | ADJ |     |     |

            bindings = <
&trans  &kp BSPC    &kp DEL  &kp PG_UP  &kp UP    &kp PG_DN  &kp HOME           &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC      &mt AMPERSAND N7    &mt ASTERISK N8  &mt LEFT_PARENTHESIS N9  &mt UNDERSCORE MINUS  &trans
        &sk LSHIFT  &trans   &kp LEFT   &kp DOWN  &kp RIGHT  &kp END            &kp C_VOL_DN          &kp C_VOL_UP              &mt DOLLAR N4       &mt PERCENT N5   &mt CARET N6             &mt PLUS EQUAL
        &kp LCTRL   &none    &none      &none     &none      &kp PRINTSCREEN    &kp RA(PERIOD)        &mt RIGHT_PARENTHESIS N0  &mt EXCLAMATION N1  &mt AT_SIGN N2   &mt HASH N3              &trans
                                        &trans    &trans     &trans             &trans                &trans                    &trans
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
            //       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            //       |      |     |     |     |     |     |   |     |     |     |     |     |      |
            //                          |     |     |     |   |     |     |     |

            bindings = <
&trans  &bt_mt 0 0  &none         &none  &none         &none  &none           &none         &none         &none         &none         &none         &bootloader  &sys_reset
        &bt_mt 1 1  &none         &none  &none         &none  &none           &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
        &bt_mt 2 2  &out OUT_BLE  &none  &out OUT_USB  &none  &out OUT_TOG    &none         &none         &none         &none         &none         &none
                                         &trans        &none  &trans          &trans        &none         &trans
            >;
        };

        a_layer {
            bindings = <
&trans  &trans     &trans  &trans     &trans       &kp RET      &kp LC(T)      &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans     &trans  &trans     &trans       &kp LC(F)    &trans         &trans  &trans  &trans  &trans  &trans  &trans
        &kp LC(A)  &trans  &kp LC(X)  &kp LC(INS)  &kp LS(INS)  &kp LS(INS)    &trans  &trans  &trans  &trans  &trans  &trans
                                      &trans       &trans       &trans         &trans  &trans  &trans
            >;

            label = "A";
        };

        e_layer {
            bindings = <
&trans  &kp BACKSPACE  &trans  &kp LC(PG_UP)       &trans       &kp LC(PG_DN)  &kp LC(T)    &trans     &trans  &trans  &trans     &trans  &trans  &trans
        &trans         &trans  &kp LA(LEFT_ARROW)  &trans       &kp LA(RIGHT)  &kp LC(R)    &trans     &trans  &trans  &kp LC(L)  &trans  &trans
        &trans         &trans  &trans              &close_term  &kp LC(W)      &kp LC(W)    &kp LC(N)  &trans  &trans  &trans     &trans  &trans
                                                   &trans       &trans         &kp RET      &trans     &trans  &trans
            >;
        };

        game {
            bindings = <
&kp LGUI  &kp TAB         &kp T  &kp Q  &kp W     &kp E      &kp R          &kp Y            &kp U       &kp UP     &kp O      &kp P   &trans  &kp RET
          &kp LEFT_SHIFT  &kp G  &kp A  &kp S     &kp D      &kp F          &kp H            &kp LEFT    &kp DOWN   &kp RIGHT  &trans  &trans
          &kp LCTRL       &kp B  &kp Z  &kp X     &kp C      &kp V          &kp N            &kp M       &kp COMMA  &kp DOT    &trans  &trans
                                        &kp LALT  &kp SPACE  &lt 7 ENTER    &lt 7 BACKSPACE  &kp DELETE  &trans
            >;
        };

        GameFn {
            bindings = <
&kp CAPS  &kp ESCAPE      &kp N1  &kp N2  &kp N3  &kp N4  &kp N5     &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none  &none  &none  &none  &none
          &kp LEFT_SHIFT  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0     &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &none  &none  &none  &none
          &kp LCTRL       &kp J   &kp I   &kp P   &kp M   &kp F12    &none                 &none                 &none  &none  &none  &none
                                          &none   &none   &none      &none                 &none                 &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
